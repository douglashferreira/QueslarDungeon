@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<html>

<head>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <style>
        table,
        thead,
        tfoot,
        tbody,
        th,
        td {
            border: 1px solid;
            align: center;
        }
    </style>
</head>

<body>
    <div>
    <span class="inicial teste">
        <input id="apikey" type="text" value="" placeholder="Put your API Key here and click 'Load' ->" maxlength="64" size="64" />
        <button id="fetchapi" onclick="fetchApi()" type="button">Load</button>
    </span>
    </div>
    <table>
        <thead>
            <tr>
                <th>Class</th>
                <th>Health</th>
                <th>Defense</th>
                <th>Damage</th>
                <th>Crit</th>
                <th>Hit</th>
                <th>Dodge</th>
                <th>Gold</th>
                <th>Gear Health</th>
                <th>Gear Defense</th>
                <th>Gear Damage</th>
                <th>Gear Crit%</th>
                <th>Gear Hit</th>
                <th>Gear Dodge</th>
                <th>Gear All Atributes</th>
                <th>Gear Block Chance</th>
                <th>Gear Damage Reduction</th>
            </tr>
        </thead>
        <tfoot>
            <tr>
                <th>Class</th>
                <th>Health</th>
                <th>Defense</th>
                <th>Damage</th>
                <th>Crit</th>
                <th>Hit</th>
                <th>Dodge</th>
                <th>Gold</th>
                <th>Gear Health</th>
                <th>Gear Defense</th>
                <th>Gear Damage</th>
                <th>Gear Crit%</th>
                <th>Gear Hit</th>
                <th>Gear Dodge</th>
                <th>Gear All Atributes</th>
                <th>Gear Block Chance</th>
                <th>Gear Damage Reduction</th>
            </tr>
        </tfoot>
        <tbody>
            <tr>
                <td>
                    <select id="fighterClass1">
                        <option value="none">---</option>
                        <option value="assassin">Assassin</option>
                        <option value="brawler">Brawler</option>
                        <option value="cavalry">Cavalry</option>
                        <option value="healer">Healer</option>
                        <option value="hunter">Hunter</option>
                        <option value="knight">Knight</option>
                        <option value="mage">Mage</option>
                        <option selected="selected" value="priest">Priest</option>
                        <option value="tank">Tank</option>
                        <option value="warrior">Warrior</option>
                        <option value="wizard">Wizard</option>
                    </select>
                </td>
                <td>
                    <input size="10" id="fighterHealth1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDefense1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDamage1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterCrit1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterHit1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDodge1" type="text" value="0" />
                </td>
                <td id="gold1">0</td>
                <td>
                    <input size="10" id="fighterGearHealth1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDefense1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDamage1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearCrit1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearHit1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDodge1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearAllAtrib1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearBlock1" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearReduce1" type="text" value="0" />
                </td>
            </tr>
            <tr background="#111111">
                <td>
                    <select id="fighterClass2">
                        <option value="none">---</option>
                        <option value="assassin">Assassin</option>
                        <option value="brawler">Brawler</option>
                        <option value="cavalry">Cavalry</option>
                        <option value="healer">Healer</option>
                        <option value="hunter">Hunter</option>
                        <option selected="selected" value="knight">Knight</option>
                        <option value="mage">Mage</option>
                        <option value="priest">Priest</option>
                        <option value="tank">Tank</option>
                        <option value="warrior">Warrior</option>
                        <option value="wizard">Wizard</option>
                    </select>
                </td>
                <td>
                    <input size="10" id="fighterHealth2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDefense2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDamage2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterCrit2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterHit2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDodge2" type="text" value="0" />
                </td>
                <td id="gold2">0</td>
                <td>
                    <input size="10" id="fighterGearHealth2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDefense2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDamage2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearCrit2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearHit2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDodge2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearAllAtrib2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearBlock2" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearReduce2" type="text" value="0" />
                </td>
            </tr>
            <tr>
                <td>
                    <select id="fighterClass3">
                        <option value="none">---</option>
                        <option value="assassin">Assassin</option>
                        <option value="brawler">Brawler</option>
                        <option value="cavalry">Cavalry</option>
                        <option selected="selected" value="healer">Healer</option>
                        <option value="hunter">Hunter</option>
                        <option value="knight">Knight</option>
                        <option value="mage">Mage</option>
                        <option value="priest">Priest</option>
                        <option value="tank">Tank</option>
                        <option value="warrior">Warrior</option>
                        <option value="wizard">Wizard</option>
                    </select>
                </td>
                <td>
                    <input size="10" id="fighterHealth3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDefense3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDamage3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterCrit3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterHit3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDodge3" type="text" value="0" />
                </td>
                <td id="gold3">0</td>
                <td>
                    <input size="10" id="fighterGearHealth3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDefense3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDamage3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearCrit3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearHit3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDodge3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearAllAtrib3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearBlock3" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearReduce3" type="text" value="0" />
                </td>
            </tr>
            <tr>
                <td>
                    <select id="fighterClass4">
                        <option value="none">---</option>
                        <option value="assassin">Assassin</option>
                        <option value="brawler">Brawler</option>
                        <option value="cavalry">Cavalry</option>
                        <option value="healer">Healer</option>
                        <option value="hunter">Hunter</option>
                        <option value="knight">Knight</option>
                        <option value="mage">Mage</option>
                        <option value="priest">Priest</option>
                        <option value="tank">Tank</option>
                        <option selected="selected" value="warrior">Warrior</option>
                        <option value="wizard">Wizard</option>
                    </select>
                </td>
                <td>
                    <input size="10" id="fighterHealth4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDefense4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDamage4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterCrit4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterHit4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDodge4" type="text" value="0" />
                </td>
                <td id="gold4">0</td>
                <td>
                    <input size="10" id="fighterGearHealth4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDefense4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDamage4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearCrit4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearHit4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDodge4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearAllAtrib4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearBlock4" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearReduce4" type="text" value="0" />
                </td>
            </tr>
            <tr>
                <td>
                    <select id="fighterClass5">
                        <option value="none">---</option>
                        <option value="assassin">Assassin</option>
                        <option value="brawler">Brawler</option>
                        <option selected="selected" value="cavalry">Cavalry</option>
                        <option value="healer">Healer</option>
                        <option value="hunter">Hunter</option>
                        <option value="knight">Knight</option>
                        <option value="mage">Mage</option>
                        <option value="priest">Priest</option>
                        <option value="tank">Tank</option>
                        <option value="warrior">Warrior</option>
                        <option value="wizard">Wizard</option>
                    </select>
                </td>
                <td>
                    <input size="10" id="fighterHealth5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDefense5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDamage5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterCrit5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterHit5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDodge5" type="text" value="0" />
                </td>
                <td id="gold5">0</td>
                <td>
                    <input size="10" id="fighterGearHealth5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDefense5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDamage5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearCrit5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearHit5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDodge5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearAllAtrib5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearBlock5" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearReduce5" type="text" value="0" />
                </td>
            </tr>
            <tr>
                <td>
                    <select id="fighterClass6">
                        <option selected="selected" value="none">---</option>
                        <option value="assassin">Assassin</option>
                        <option value="brawler">Brawler</option>
                        <option value="cavalry">Cavalry</option>
                        <option value="healer">Healer</option>
                        <option value="hunter">Hunter</option>
                        <option value="knight">Knight</option>
                        <option value="mage">Mage</option>
                        <option value="priest">Priest</option>
                        <option value="tank">Tank</option>
                        <option value="warrior">Warrior</option>
                        <option value="wizard">Wizard</option>
                    </select>
                </td>
                <td>
                    <input size="10" id="fighterHealth6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDefense6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDamage6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterCrit6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterHit6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterDodge6" type="text" value="0" />
                </td>
                <td id="gold6">0</td>
                <td>
                    <input size="10" id="fighterGearHealth6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDefense6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDamage6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearCrit6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearHit6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearDodge6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearAllAtrib6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearBlock6" type="text" value="0" />
                </td>
                <td>
                    <input size="10" id="fighterGearReduce6" type="text" value="0" />
                </td>
            </tr>
        </tbody>
    </table>
    <fieldset>
        <legend>Gold invested</legend>
        <div id="goldLevels">Levels: 0</div>
        <div id="goldFighters">Fighters: 111100000</div>
        <div id="goldTotal">Total: 111100000</div>
    </fieldset>
    <fieldset>
        <legend>Simulator Tool</legend>
        <div><label>Dungeon: </label><input id="simulationDungeon" type="text" value="400" /> Start dungeon of simulation</div>
        <div><label>Battles: </label><input id="simulationBattles" type="text" value="10000" /> Number of fight simulations</div>
        <div><label>Wins to advance: </label><input id="simulationAdvance" type="text" value="0" /> After reaching this amount of wins, it'll reset number of battles and advance one dungeon level, if you just want to check winrate on a single dungeon level, put 0 here</div>
        <div id="simulationButton" onclick="simulationToggle()"><button type="button">Start</button></div>
        <div id="simulationResult"></div>
    </fieldset>
    <fieldset>
        <legend>Improvement Tool</legend>
        <div><label>Dungeon Start: </label><input id="simulation2Dungeon" type="text" value="400" /> Start dungeon on Improve simulation, check base Winrate on Simulator above to match desired starting Winrate on Improvement Tool</div>
        <div><label>Battles: </label><input id="simulation2Battles" type="text" value="100000" /> Number of battles on each Stat simulated, higher values reduce RNG but takes longer to reach final result</div>
        <div><label>Upgrade Test: </label><input id="simulation2Steps" type="text" value="200" /> Number of upgrades on each Stat above 100 upgrades to simulate new results</div>
        <div><label>Upgrade Best: </label><input id="simulation2Upgrades" type="text" value="50" /> Used with 'Available Gold/Total Budget' and 'Max Winrate'. After simulating each Stat, the simulator will upgrade the best Stat with this amount. Use a lower value than 'Upgrade Test' to reduce RNG upgrades</div>
        <div><label>Available Gold: </label><input id="simulation2Budget" type="text" value="0" /> Used with 'Upgrade Best' and 'Max Winrate'. Put you current available gold to invest, will be used to upgrade the best Stat on simulation, as long as you can afford the upgrade.</div>
        <div><label>Total Budget: </label><input id="simulation2TotalBudget" type="text" value="0" /> Used with 'Upgrade Best' and 'Max Winrate'. Put your total gold invested on preset, it'll update 'Available Gold' according to upgrades done.</div>
        <div><label>Max Winrate: </label><input id="simulation2wr" type="text" value="3" />% Used with 'Upgrade Best' and 'Available Gold/Total Budget'. Upon reaching this amount of winrate based on number of Battles simulated, it'll advance 10 dungeon levels</div>
        <div id="simulation2Button" onclick="simulation2Toggle()"><button type="button">Start</button></div>
        <div id="simulation2Result"></div>
    </fieldset>
</body>
<script>
    let fighterMap = new Map();
    fighterMap.set("1,0", "1");
    fighterMap.set("1,1", "2");
    fighterMap.set("1,2", "3");
    fighterMap.set("2,0", "4");
    fighterMap.set("2,1", "5");
    fighterMap.set("2,2", "6");

    let item_tier = [0, 1.15, 1.25, 1.5, 1.65, 1.9, 2.1, 2.3, 2.5, 3, 4, 10, 15, 20];

    let upgrades2 = ["fighterHealth1", "fighterDefense1", "fighterDodge1", "fighterDamage1", "fighterHit1", "fighterCrit1", "fighterHealth2", "fighterDefense2", "fighterDodge2", "fighterDamage2", "fighterHit2", "fighterCrit2", "fighterHealth3", "fighterDefense3", "fighterDodge3", "fighterDamage3", "fighterHit3", "fighterCrit3", "fighterHealth4", "fighterDefense4", "fighterDodge4", "fighterDamage4", "fighterHit4", "fighterCrit4", "fighterHealth5", "fighterDefense5", "fighterDodge5", "fighterDamage5", "fighterHit5", "fighterCrit5", "fighterHealth6", "fighterDefense6", "fighterDodge6", "fighterDamage6", "fighterHit6", "fighterCrit6"];
    let upgradesStat2 = ["Health", "Defense", "Dodge", "Damage", "Hit", "Crit", "Health", "Defense", "Dodge", "Damage", "Hit", "Crit", "Health", "Defense", "Dodge", "Damage", "Hit", "Crit", "Health", "Defense", "Dodge", "Damage", "Hit", "Crit", "Health", "Defense", "Dodge", "Damage", "Hit", "Crit", "Health", "Defense", "Dodge", "Damage", "Hit", "Crit"];
    let upgradesName2 = ["fighterClass1", "fighterClass1", "fighterClass1", "fighterClass1", "fighterClass1", "fighterClass1", "fighterClass2", "fighterClass2", "fighterClass2", "fighterClass2", "fighterClass2", "fighterClass2", "fighterClass3", "fighterClass3", "fighterClass3", "fighterClass3", "fighterClass3", "fighterClass3", "fighterClass4", "fighterClass4", "fighterClass4", "fighterClass4", "fighterClass4", "fighterClass4", "fighterClass5", "fighterClass5", "fighterClass5", "fighterClass5", "fighterClass5", "fighterClass5", "fighterClass6", "fighterClass6", "fighterClass6", "fighterClass6", "fighterClass6", "fighterClass6"];
    let upgrades = [];
    let upgradesStat = [];
    let upgradesName = [];
    let upgrade_step = 0;
    let fim = false;
    let result_upgrade = "";
    let base_sim = true;
    let base_gold_preset = 0;
    let base_winrate = 0;
    let best_eff = 0;
    let best_stat = 0;
    let healer_tested = 0;

    function reset_step() {
        upgrade_step = 0;
        fim = false;
        result_upgrade = "";
        base_sim = true;
        base_winrate = 0;
        best_eff = 0;
        best_stat = 0;
        healer_tested = 0;
    }

    function fetchApi() {
        var apikey = document.getElementById("apikey").value;
        var request = new XMLHttpRequest();
        request.open('GET', 'https://queslar.com/api/player/full/' + apikey);
        request.onload = function () {
            var data = JSON.parse(this.response);
            window.data = data;
            var presets = data.fighterPresets;
            window.presets = presets;
            for (var i in presets) {
                if (presets[i].assignment == 'dungeon') {
                    var lutadores2 = presets[i].fighters;
                    window.lutadores2 = lutadores2;
                }
            }
            for (var i = 1; i < 7; i++) {
                document.getElementById("fighterHealth" + i).value = 0;
                document.getElementById("fighterDefense" + i).value = 0;
                document.getElementById("fighterDamage" + i).value = 0;
                document.getElementById("fighterCrit" + i).value = 0;
                document.getElementById("fighterHit" + i).value = 0;
                document.getElementById("fighterDodge" + i).value = 0;
            }
            fighterMap.forEach(function (value, key) {
                var fighterId = "fighterClass" + value;
                document.getElementById(fighterId).value = "none";

            });
            var lutadores = data.fighters;
            window.lutadores = lutadores;
            lutadores2.forEach((fighter) => {
                var fighterN = fighterMap.get(fighter.column_placement.toString() + "," + fighter.row_placement.toString());
                var fighterId = "fighterClass" + fighterN;
                document.getElementById("fighterHealth" + fighterN).value = fighter.health; if (fighter.health > 100) { upgrades.push("fighterHealth" + fighterN); upgradesStat.push("Health"); upgradesName.push("fighterClass" + fighterN) }
                document.getElementById("fighterDefense" + fighterN).value = fighter.defense; if (fighter.defense > 100) { upgrades.push("fighterDefense" + fighterN); upgradesStat.push("Defense"); upgradesName.push("fighterClass" + fighterN) }
                document.getElementById("fighterDamage" + fighterN).value = fighter.damage; if (fighter.damage > 100) { upgrades.push("fighterDamage" + fighterN); upgradesStat.push("Damage"); upgradesName.push("fighterClass" + fighterN) }
                document.getElementById("fighterCrit" + fighterN).value = fighter.crit_damage; if (fighter.crit_damage > 100 && fighter.class != "healer") { upgrades.push("fighterCrit" + fighterN); upgradesStat.push("Crit"); upgradesName.push("fighterClass" + fighterN) }
                document.getElementById("fighterHit" + fighterN).value = fighter.hit; if (fighter.hit > 100) { upgrades.push("fighterHit" + fighterN); upgradesStat.push("Hit"); upgradesName.push("fighterClass" + fighterN) }
                document.getElementById("fighterDodge" + fighterN).value = fighter.dodge; if (fighter.dodge > 100) { upgrades.push("fighterDodge" + fighterN); upgradesStat.push("Dodge"); upgradesName.push("fighterClass" + fighterN) }
                document.getElementById("fighterGearHealth" + fighterN).value = fighter.item_health * item_tier[fighter.item_health_tier];
                document.getElementById("fighterGearDefense" + fighterN).value = fighter.item_defense * item_tier[fighter.item_defense_tier];
                document.getElementById("fighterGearDamage" + fighterN).value = fighter.item_damage * item_tier[fighter.item_damage_tier];
                document.getElementById("fighterGearCrit" + fighterN).value = fighter.item_crit_damage * item_tier[fighter.item_crit_damage_tier];
                document.getElementById("fighterGearHit" + fighterN).value = fighter.item_hit * item_tier[fighter.item_hit_tier];
                document.getElementById("fighterGearDodge" + fighterN).value = fighter.item_dodge * item_tier[fighter.item_dodge_tier];
                document.getElementById("fighterGearAllAtrib" + fighterN).value = fighter.item_all_attributes * item_tier[fighter.item_all_attributes_tier];
                document.getElementById("fighterGearBlock" + fighterN).value = (fighter.item_block * item_tier[fighter.item_block_tier]) / 100;
                document.getElementById("fighterGearReduce" + fighterN).value = (fighter.item_damage_reduction * item_tier[fighter.item_damage_reduction_tier]) / 100;
                document.getElementById(fighterId).value = fighter.class;
            });
            document.getElementById("simulationDungeon").value = data.playerFighterData.dungeon_level + 1;
            document.getElementById("simulation2Dungeon").value = data.playerFighterData.dungeon_level;
            updateGold();
        }
        request.send();
    }

    function checkfighters() {
        upgrades = [];
        upgradesStat = [];
        upgradesName = [];
        healer_tested = 0;
        for (i = 1; i < 7; ++i) {
            if (document.getElementById("fighterClass" + i).value == "healer" && healer_tested == 1) {

            } else {
                if (document.getElementById("fighterHealth" + i).value > 100) { upgrades.push("fighterHealth" + i); upgradesStat.push("Health"); upgradesName.push("fighterClass" + i); }
                if (document.getElementById("fighterDefense" + i).value > 100) { upgrades.push("fighterDefense" + i); upgradesStat.push("Defense"); upgradesName.push("fighterClass" + i); }
                if (document.getElementById("fighterDamage" + i).value > 100) { upgrades.push("fighterDamage" + i); upgradesStat.push("Damage"); upgradesName.push("fighterClass" + i); }
                if (document.getElementById("fighterCrit" + i).value > 100 && document.getElementById("fighterClass" + i).value != "healer") { upgrades.push("fighterCrit" + i); upgradesStat.push("Crit"); upgradesName.push("fighterClass" + i); }
                if (document.getElementById("fighterHit" + i).value > 100) { upgrades.push("fighterHit" + i); upgradesStat.push("Hit"); upgradesName.push("fighterClass" + i); }
                if (document.getElementById("fighterDodge" + i).value > 100) { upgrades.push("fighterDodge" + i); upgradesStat.push("Dodge"); upgradesName.push("fighterClass" + i); }
                if (document.getElementById("fighterClass" + i).value == "healer") {
                    healer_tested = 1;
                }
            }
        }
    }

    function monsterMulti(level) {
        var multi = level;
        var i = Math.floor(Math.max(0, level - 400) / 200);
        var tier = 0
        while (i > 0) {
            i--;
            tier = 600 + (i * 200);
            multi += level - tier;
        }
        return multi;
    }

    function dungeon(level) {
        let monster = [];
        while (monster.length < 6 && monster.length * 50 <= level) {
            let monsterLevel = level - 25 * monster.length;
            var multi = monsterMulti(monsterLevel);
            monster[monster.length] = {
                monster: true,
                level: monsterLevel,
                num: monster.length + 1,
                health: 0,
                healthMax: Math.floor(100 + 400 * multi),
                defense: Math.floor(20 + 10 * multi),
                damage: Math.floor(60 + 40 * multi),
                critMultiplier: 2,
                hit: Math.floor(50 + 30 * multi),
                dodge: Math.floor(50 + 30 * multi),
                hitcount: 0,
            };
        }
        return monster;
    }

    function readInput() {
        let classes = {};
        let fighter = [];
        let classBonus = 1.3;
        for (let index = 1; index <= 6; ++index) {
            let newClass = document.getElementById("fighterClass" + index).value;
            if (newClass != "none") {
                if (!classes[newClass]) {
                    classBonus += 0.2;
                    classes[newClass] = true;
                }
            }
        }
        for (let index = 1; index <= 6; ++index) {
            if (document.getElementById("fighterClass" + index).value != "none") {
                fighter[fighter.length] = {
                    className: document.getElementById("fighterClass" + index).value,
                    health: 0,
                    healthMax: Math.floor((500 + 100 * parseInt(document.getElementById("fighterHealth" + index).value)) * classBonus) + parseInt(document.getElementById("fighterGearHealth" + index).value) + parseInt(document.getElementById("fighterGearAllAtrib" + index).value),
                    defense: Math.floor((25 + 10 * parseInt(document.getElementById("fighterDefense" + index).value)) * classBonus) + parseInt(document.getElementById("fighterGearDefense" + index).value) + parseInt(document.getElementById("fighterGearAllAtrib" + index).value),
                    damage: Math.floor((100 + 25 * parseInt(document.getElementById("fighterDamage" + index).value)) * classBonus) + parseInt(document.getElementById("fighterGearDamage" + index).value) + parseInt(document.getElementById("fighterGearAllAtrib" + index).value),
                    critMultiplier: 1 + 0.0025 * parseInt(document.getElementById("fighterCrit" + index).value) * classBonus + (parseInt(document.getElementById("fighterGearCrit" + index).value) / 100),
                    hit: (Math.floor((50 + 50 * parseInt(document.getElementById("fighterHit" + index).value)) * classBonus) + parseInt(document.getElementById("fighterGearHit" + index).value) + parseInt(document.getElementById("fighterGearAllAtrib" + index).value)) * (document.getElementById("fighterClass" + index).value == "cavalry" ? 2 : 1),
                    dodge: Math.floor((50 + 50 * parseInt(document.getElementById("fighterDodge" + index).value)) * classBonus) + parseInt(document.getElementById("fighterGearDodge" + index).value) + parseInt(document.getElementById("fighterGearAllAtrib" + index).value),
                    blockchance: (parseInt(document.getElementById("fighterGearBlock" + index).value) / 100),
                    damagereduction: (parseInt(document.getElementById("fighterGearReduce" + index).value) / 100),
                    hitcount: 0,
                };
            }
        }
        return fighter;
    }
    function readInput2() {
        let classes = {};
        let fighter = [];
        let classBonus = 1.3;
        for (let index = 1; index <= 6; ++index) {
            let newClass = document.getElementById("fighterClass" + index).value;
            if (newClass != "none") {
                if (!classes[newClass]) {
                    classBonus += 0.2;
                    classes[newClass] = true;
                }
            }
        }
        for (let index = 1; index <= 6; ++index) {
            if (document.getElementById("fighterClass" + index).value != "none") {
                fighter[fighter.length] = {
                    className: document.getElementById("fighterClass" + index).value,
                    health: parseInt(document.getElementById("fighterHealth" + index).value),
                    defense: parseInt(document.getElementById("fighterDefense" + index).value),
                    damage: parseInt(document.getElementById("fighterDamage" + index).value),
                    critMultiplier: parseInt(document.getElementById("fighterCrit" + index).value),
                    hit: parseInt(document.getElementById("fighterHit" + index).value),
                    dodge: parseInt(document.getElementById("fighterDodge" + index).value),
                };
            }
        }
        return fighter;
    }
    function simulationCrunch(monster, fighter, maxCounter) {
        let attacker;
        let critChance = 0.1;
        let damage;
        let defender;
        let defenderIndex;
        let dummyHealTarget = {
            health: 1,
            healthMax: 1,
        };
        let index;
        let over = false;
        let lowestPercentHealth;
        let queue = [];
        let result = {
            battles: maxCounter,
            loss150: 0,
            lossAverageRound: 0,
            wins: 0,
            winAverageRound: 0,
        };
        let round;
        for (index in fighter) {
            queue[queue.length] = fighter[index];
        }
        for (index in monster) {
            queue[queue.length] = monster[index];
        }
        for (index = 0; index < queue.length - 1; ++index) {
            defender = queue[index];
            defenderIndex = index;
            for (attacker = index + 1; attacker < queue.length; ++attacker) {
                if (queue[attacker].hit > defender.hit) {
                    defender = queue[attacker];
                    defenderIndex = attacker;
                }
            }
            attacker = queue[index];
            queue[index] = defender;
            queue[defenderIndex] = attacker;
        }
        for (let counter = maxCounter; counter > 0; --counter) {
            for (index in fighter) {
                fighter.tanky = 0;
                fighter.hitcount = 0;
            }
            for (index in monster) {
                monster[index].stunned = 0;
                monster[index].hitcount = 0;
            }
            for (index in queue) {
                queue[index].health = queue[index].healthMax;
                queue[index].hitcount = 0;
            }
            over = false;
            for (round = 1; !over && round < 150; ++round) {
                for (index in fighter) {
                    if (fighter[index].health <= 0 && fighter[index].className == "priest" && Math.random() < 0.1) {
                        fighter[index].health = fighter[index].healthMax;
                    } else if (fighter[index].tanky > 0) {
                        --fighter[index].tanky;
                    }
                }
                for (index in queue) {
                    attacker = queue[index];
                    if (attacker.health > 0) {
                        if (attacker.monster) {
                            if (attacker.stunned) {
                                --attacker.stunned;
                            } else {
                                defender = fighter[0];
                                defenderIndex = 0;
                                while (defender.health <= 0) {
                                    ++defenderIndex;
                                    defender = fighter[defenderIndex];
                                }
                                if (Math.random() < attacker.hit / (attacker.hit + defender.dodge)) {
                                    if (defender.className == "tank" && Math.random() < 0.15) {
                                        defender.tanky = 3;
                                    }
                                    damage = attacker.damage;
                                    if (attacker.hitcount == 9) {
                                        damage *= attacker.critMultiplier;
                                        attacker.hitcount = 0;
                                    } else {
                                        attacker.hitcount++;
                                    }
                                    block = 0;
                                    if (defender.className == "knight") {
                                        block += 0.4;
                                    }
                                    if (Math.random() < defender.blockchance) {
                                        block += 0.4;
                                    }
                                    dano = Math.round((Math.round(damage) - defender.defense) * (1 - block) * (1 - defender.damagereduction) * (defender.tanky > 0 ? 0.5 : 1));
                                    defender.health -= Math.max(0, dano);
                                    if (defender.health <= 0 && defenderIndex == fighter.length - 1) {
                                        result.lossAverageRound += round;
                                        over = true;
                                        break;
                                    }
                                }
                            }
                        } else if (attacker.className != "knight") {
                            if (attacker.className == "healer") {
                                damage = Math.floor(attacker.damage * 0.75);
                                if (attacker.hitcount == 9) {
                                    damage *= attacker.critMultiplier;
                                    attacker.hitcount = 0;
                                } else {
                                    attacker.hitcount++;
                                }
                                defender = dummyHealTarget;
                                lowestPercentHealth = 1;
                                for (defenderIndex = 0; defenderIndex < fighter.length; ++defenderIndex) {
                                    if (fighter[defenderIndex].health > 0 && fighter[defenderIndex].health / fighter[defenderIndex].healthMax < lowestPercentHealth) {
                                        defender = fighter[defenderIndex];
                                        lowestPercentHealth = defender.health / defender.healthMax;
                                    }
                                }
                                defender.health += Math.floor(damage);
                                if (defender.health > defender.healthMax) {
                                    defender.health = defender.healthMax;
                                }
                            } else {
                                if (attacker.className == "assassin" && monster.length > 3) {
                                    defender = monster[3];
                                    defenderIndex = 3;
                                    while (defender.health <= 0) {
                                        ++defenderIndex;
                                        if (defenderIndex >= monster.length) {
                                            defenderIndex = 0;
                                        }
                                        defender = monster[defenderIndex];
                                    }
                                } else {
                                    defender = monster[0];
                                    defenderIndex = 0;
                                    while (defender.health <= 0) {
                                        ++defenderIndex;
                                        defender = monster[defenderIndex];
                                    }
                                }
                                if (Math.random() < attacker.hit / (attacker.hit + defender.dodge)) {
                                    damage = attacker.damage;
                                    if (attacker.hitcount == 9) {
                                        damage *= attacker.critMultiplier;
                                        attacker.hitcount = 0;
                                    } else {
                                        attacker.hitcount++;
                                    }
                                    if (attacker.className == "hunter") {
                                        Math.round(damage *= 0.75);
                                    } else if (attacker.className == "mage") {
                                        Math.round(damage *= 0.5);
                                    }
                                    defender.health -= Math.max(0, Math.round(damage) - defender.defense);
                                    if (defender.health <= 0) {
                                        over = true;
                                        for (defenderIndex = 0; over && defenderIndex < monster.length; ++defenderIndex) {
                                            if (monster[defenderIndex].health > 0) {
                                                over = false;
                                            }
                                        }
                                        if (over) {
                                            ++result.wins;
                                            result.winAverageRound += round;
                                            break;
                                        }
                                    } else if (attacker.className == "warrior" && Math.random < 0.1) {
                                        defender.stunned = 2;
                                    }
                                }
                                if (attacker.className == "brawler" && Math.random < 0.15) {
                                    if (defender.health <= 0) {
                                        ++defenderIndex;
                                        defender = monster[defenderIndex];
                                    }
                                    if (Math.random() < attacker.hit / (attacker.hit + defender.dodge)) {
                                        damage = attacker.damage;
                                        if (attacker.hitcount == 9) {
                                            damage *= attacker.critMultiplier;
                                            attacker.hitcount = 0;
                                        } else {
                                            attacker.hitcount++;
                                        }
                                        defender.health -= Math.max(0, Math.round(damage) - defender.defense);
                                        if (defender.health <= 0) {
                                            over = true;
                                            for (defenderIndex = 0; over && defenderIndex < monster.length; ++defenderIndex) {
                                                if (monster[defenderIndex].health > 0) {
                                                    over = false;
                                                }
                                            }
                                            if (over) {
                                                ++result.wins;
                                                result.winAverageRound += round;
                                            }
                                            break;
                                        }
                                    }
                                } else if (attacker.className == "hunter" && defenderIndex + 3 < monster.length) {
                                    defenderIndex += 3;
                                    defender = monster[defenderIndex];
                                    if (defender.health > 0 && Math.random() < attacker.hit / (attacker.hit + defender.dodge)) {
                                        damage = Math.round(attacker.damage * 0.75);
                                        if (attacker.hitcount == 9) {
                                            damage *= attacker.critMultiplier;
                                            attacker.hitcount = 0;
                                        } else {
                                            attacker.hitcount++;
                                        }
                                        defender.health -= Math.max(0, Math.round(damage) - defender.defense);
                                        if (defender.health <= 0) {
                                            over = true;
                                            for (defenderIndex = 0; over && defenderIndex < monster.length; ++defenderIndex) {
                                                if (monster[defenderIndex].health > 0) {
                                                    over = false;
                                                }
                                            }
                                            if (over) {
                                                ++result.wins;
                                                result.winAverageRound += round;
                                            }
                                            break;
                                        }
                                    }
                                } else if (attacker.className == "mage") {
                                    if (defenderIndex % 3 < 2 && monster.length > defenderIndex + 1) {
                                        defender = monster[defenderIndex + 1];
                                        if (defender.health > 0 && Math.random() < attacker.hit / (attacker.hit + defender.dodge)) {
                                            damage = Math.round(attacker.damage * 0.5);
                                            if (attacker.hitcount == 9) {
                                                damage *= attacker.critMultiplier;
                                                attacker.hitcount = 0;
                                            } else {
                                                attacker.hitcount++;
                                            }
                                            defender.health -= Math.max(0, Math.round(damage) - defender.defense);
                                        }
                                    }
                                    if (defenderIndex % 3 == 0 && monster.length > defenderIndex + 2) {
                                        defender = monster[defenderIndex + 2];
                                        if (defender.health > 0 && Math.random() < attacker.hit / (attacker.hit + defender.dodge)) {
                                            damage = Math.round(attacker.damage * 0.5);
                                            if (attacker.hitcount == 9) {
                                                damage *= attacker.critMultiplier;
                                                attacker.hitcount = 0;
                                            } else {
                                                attacker.hitcount++;
                                            }
                                            defender.health -= Math.max(0, Math.round(damage) - defender.defense);
                                        }
                                    }
                                    over = true;
                                    for (defenderIndex = 0; over && defenderIndex < monster.length; ++defenderIndex) {
                                        if (monster[defenderIndex].health > 0) {
                                            over = false;
                                        }
                                    }
                                    if (over) {
                                        ++result.wins;
                                        result.winAverageRound += round;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!over) {
                ++result.loss150;
                result.lossAverageRound += 150;
            }
        }
        if (result.lossAverageRound > 0) {
            result.lossAverageRound /= result.battles - result.wins;
        }
        if (result.winAverageRound > 0) {
            result.winAverageRound /= result.wins;
        }
        return result;
    }

    function simulationLoop() {
        let chunkSize = simulation.battles - simulation.result.battles;
        if (chunkSize > simulation.step) {
            chunkSize = simulation.step;
        }
        let chunk = simulationCrunch(simulation.dungeon, simulation.fighters, chunkSize);
        simulation.result.loss150 += chunk.loss150;
        simulation.result.lossAverageRound = simulation.result.lossAverageRound * (simulation.result.battles - simulation.result.wins) + chunk.lossAverageRound * (chunk.battles - chunk.wins);
        simulation.result.winAverageRound = simulation.result.winAverageRound * simulation.result.wins + chunk.winAverageRound * chunk.wins;
        simulation.result.battles += chunk.battles;
        simulation.result.wins += chunk.wins;
        if (simulation.result.lossAverageRound > 0) {
            simulation.result.lossAverageRound /= simulation.result.battles - simulation.result.wins;
        }
        if (simulation.result.winAverageRound > 0) {
            simulation.result.winAverageRound /= simulation.result.wins;
        }
        if (simulation.advance > 0 && simulation.result.wins >= simulation.advance) {
            document.getElementById("simulationDungeon").value = parseInt(document.getElementById("simulationDungeon").value) + 1;
            simulation.dungeon = dungeon(parseInt(document.getElementById("simulationDungeon").value));
            simulation.result = {
                battles: 0,
                loss150: 0,
                lossAverageRound: 0,
                wins: 0,
                winAverageRound: 0,
            };
        }
        document.getElementById("simulationResult").innerHTML =
            simulation.result.battles + "/" + simulation.battles + "<br />"
            + "Win rate: " + parseFloat(100 * simulation.result.wins / simulation.result.battles).toFixed(2) + "% (Wins: " + simulation.result.wins + "/ Loses: " + (simulation.result.battles - simulation.result.wins) + ")<br />"
            + "Average win round: " + parseFloat(simulation.result.winAverageRound).toFixed(1) + "<br />"
            + "Average loss round: " + parseFloat(simulation.result.lossAverageRound).toFixed(1) + "<br />"
            + "Round 150 auto losses: " + simulation.result.loss150;
        if (simulation.active) {
            if (simulation.result.battles < simulation.battles) {
                setTimeout(simulationLoop);
            } else {
                simulationToggle(true);
                document.getElementById("fighterHealth1").value = parseInt(document.getElementById("fighterHealth1").value) + 50;
                //simulation2Toggle();
            }
        }
    }
    function simulation2Loop() {
        let chunkSize = simulation.battles - simulation.result.battles;
        if (chunkSize > simulation.step) {
            chunkSize = simulation.step;
        }
        let chunk = simulationCrunch(simulation.dungeon, simulation.fighters, chunkSize);
        simulation.result.loss150 += chunk.loss150;
        simulation.result.lossAverageRound = simulation.result.lossAverageRound * (simulation.result.battles - simulation.result.wins) + chunk.lossAverageRound * (chunk.battles - chunk.wins);
        simulation.result.winAverageRound = simulation.result.winAverageRound * simulation.result.wins + chunk.winAverageRound * chunk.wins;
        simulation.result.battles += chunk.battles;
        simulation.result.wins += chunk.wins;
        if (simulation.result.lossAverageRound > 0) {
            simulation.result.lossAverageRound /= simulation.result.battles - simulation.result.wins;
        }
        if (simulation.result.winAverageRound > 0) {
            simulation.result.winAverageRound /= simulation.result.wins;
        }
        if (base_sim) {
            step_message = "Checking for a Base Winrate lower than " + simulation.winrate + "%";
        }
        document.getElementById("simulationResult").innerHTML =
            simulation.result.battles + "/" + simulation.battles + "<br />"
            + "Win rate: " + parseFloat(100 * simulation.result.wins / simulation.result.battles).toFixed(2) + "%<br />"
            + "Average win round: " + parseFloat(simulation.result.winAverageRound).toFixed(1) + "<br />"
            + "Average loss round: " + parseFloat(simulation.result.lossAverageRound).toFixed(1) + "<br />"
            + "Round 150 auto losses: " + simulation.result.loss150 + "<br />"
            + "Step: " + step_message;
        if (simulation.active) {
            if (simulation.result.battles < simulation.battles) {
                setTimeout(simulation2Loop);
            } else {
                simulation2Toggle(true);
                if (base_sim) {
                    base_winrate = parseFloat(100 * simulation.result.wins / simulation.result.battles);
                    result_upgrade = result_upgrade + "Base Simulation - Winrate: " + base_winrate + "<br />";
                    base_gold_preset = updateGold3();
                    base_sim = false;
                }
                if (base_winrate < simulation.winrate) {

                    if (upgrade_step > 0 && document.getElementById(upgrades[(upgrade_step - 1)]).value > 100) {
                        thiscost = updateGold3() - base_gold_preset;
                        wr = parseFloat((100 * simulation.result.wins / simulation.result.battles) - base_winrate);
                        eff = thiscost / wr;
                        if (eff > 0 && eff < best_eff) {
                            best_eff = eff;
                            best_stat = upgrade_step - 1;
                        }
                        if (eff > 0 && best_eff == 0) {
                            best_eff = eff;
                            best_stat = upgrade_step - 1;
                        }
                        result_upgrade = result_upgrade + document.getElementById(upgradesName[(upgrade_step - 1)]).value + " " + upgradesStat[(upgrade_step - 1)] + " - Winrate +/-: " + wr + " - Cost: " + thiscost.toLocaleString() + " - Eff: " + eff.toLocaleString() + "<br />";
                        document.getElementById(upgrades[(upgrade_step - 1)]).value = parseInt(document.getElementById(upgrades[(upgrade_step - 1)]).value) - simulation.upgradesteps;

                        if (parseInt(document.getElementById("simulation2TotalBudget").value) > 0) {
                            document.getElementById("simulation2Budget").value = parseInt(document.getElementById("simulation2TotalBudget").value) - updateGold3();
                        }
                    }
                    while (upgrade_step < upgrades.length && document.getElementById(upgrades[upgrade_step]).value < 100) {
                        upgrade_step++;
                    }
                    if (upgrade_step < upgrades.length) {
                        step_message = "Testing for +" + simulation.upgradesteps + " " + document.getElementById(upgradesName[upgrade_step]).value + " " + upgradesStat[upgrade_step];
                        document.getElementById(upgrades[upgrade_step]).value = parseInt(document.getElementById(upgrades[upgrade_step]).value) + simulation.upgradesteps;
                        upgrade_step++;
                        simulation2Toggle();
                    } else {
                        document.getElementById("simulation2Result").innerHTML = "Best Stat: " + document.getElementById(upgradesName[best_stat]).value + " " + upgradesStat[best_stat] + "<br />" + result_upgrade;
                        if (parseInt(document.getElementById("simulation2Budget").value) > 0 && best_eff > 0) {
                            totalbudget = updateGold2();
                            if (document.getElementById(upgradesName[best_stat]).value == "healer") {
                                for (i = 1; i < 7; ++i) {
                                    if (document.getElementById("fighterClass" + i).value == "healer") {
                                        document.getElementById("fighterDamage" + i).value = parseInt(document.getElementById("fighterDamage" + i).value) + simulation.upgrades;
                                    }
                                }
                            } else {
                                document.getElementById(upgrades[best_stat]).value = parseInt(document.getElementById(upgrades[best_stat]).value) + simulation.upgrades;
                            }
                            document.getElementById("simulation2Budget").value = totalbudget - updateGold3();
                        }
                        if (parseInt(document.getElementById("simulation2Budget").value) < 0) {
                            document.getElementById("simulation2Budget").value = 0;
                            if (document.getElementById(upgradesName[best_stat]).value == "healer") {
                                for (i = 1; i < 7; ++i) {
                                    if (document.getElementById("fighterClass" + i).value == "healer") {
                                        document.getElementById("fighterDamage" + i).value = parseInt(document.getElementById("fighterDamage" + i).value) - simulation.upgrades;
                                    }
                                }
                            } else {
                                document.getElementById(upgrades[best_stat]).value = parseInt(document.getElementById(upgrades[best_stat]).value) - simulation.upgrades;
                            }
                        }
                        upgrade_step = 0;
                        fim = false;
                        result_upgrade = "";
                        base_sim = true;
                        base_winrate = 0;
                        best_eff = 0;
                        best_stat = 0;
                        healer_tested = 0;
                        updateGold();
                        if (parseInt(document.getElementById("simulation2Budget").value) > 0) {
                            simulation2Toggle();
                        }
                    }
                } else {
                    base_sim = true;
                    document.getElementById("simulation2Dungeon").value = parseInt(document.getElementById("simulation2Dungeon").value) + 10;
                    result_upgrade = "";
                    simulation2Toggle();
                }
            }
        }
    }

    function simulationToggle(off) {
        if (simulation.active || off) {
            simulation.active = false;
            document.getElementById("simulationButton").innerHTML = '<button type="button">Start</button>';
            updateGold();
        } else {
            document.getElementById("simulationButton").innerHTML = '<button type="button">Stop</button>';
            simulation.active = true;
            simulation.battles = parseInt(document.getElementById("simulationBattles").value);
            simulation.advance = parseInt(document.getElementById("simulationAdvance").value);
            simulation.dungeon = dungeon(parseInt(document.getElementById("simulationDungeon").value));
            document.getElementById("simulation2Dungeon").value = parseInt(document.getElementById("simulationDungeon").value)
            simulation.fighters = readInput();
            simulation.winrate = 0;
            simulation.beststat = 0;
            simulation.besteff = 0;
            simulation.result = {
                battles: 0,
                loss150: 0,
                lossAverageRound: 0,
                wins: 0,
                winAverageRound: 0,
                winrate: 0,
                beststat: 0,
                besteff: 0,
            };
            updateGold();
            setTimeout(simulationLoop);
        }
    }
    function simulation2Toggle(off) {
        if (simulation.active || off) {
            simulation.active = false;
            document.getElementById("simulationButton").innerHTML = '<button type="button">Start</button>';
            updateGold();
        } else {
            document.getElementById("simulationButton").innerHTML = '<button type="button">Stop</button>';
            simulation.active = true;
            checkfighters();
            simulation.battles = parseInt(document.getElementById("simulation2Battles").value);
            document.getElementById("simulationDungeon").value = parseInt(document.getElementById("simulation2Dungeon").value)
            simulation.dungeon = dungeon(parseInt(document.getElementById("simulationDungeon").value));
            simulation.upgradesteps = parseInt(document.getElementById("simulation2Steps").value);
            simulation.upgrades = parseInt(document.getElementById("simulation2Upgrades").value);
            simulation.fighters = readInput();
            simulation.winrate = parseInt(document.getElementById("simulation2wr").value);
            if (parseInt(document.getElementById("simulation2TotalBudget").value) > 0) {
                document.getElementById("simulation2Budget").value = parseInt(document.getElementById("simulation2TotalBudget").value) - updateGold3();
            }
            updateGold();
            simulation.result = {
                battles: 0,
                loss150: 0,
                lossAverageRound: 0,
                wins: 0,
                winAverageRound: 0,
            };
            setTimeout(simulation2Loop);
        }
    }

    function updateGold() {
        let fightersBought = 0;
        let totalGold = 0;
        for (let index = 1, partialIds = ["Health", "Defense", "Damage", "Crit", "Hit", "Dodge"]; index <= 6; ++index) {
            let gold = 0;
            if (document.getElementById("fighterClass" + index).value != "none") {
                ++fightersBought;
                for (let partial of partialIds) {
                    let level = parseInt(document.getElementById("fighter" + partial + index).value);
                    gold += level * (level + 1) * 5000;
                }
            }
            document.getElementById("gold" + index).innerHTML = gold.toLocaleString();
            totalGold += gold;
        }
        document.getElementById("goldLevels").innerHTML = "Levels: " + totalGold.toLocaleString();
        let fightersGold = 0;
        for (let cost = 100000; fightersBought > 1; --fightersBought) {
            fightersGold += cost;
            cost *= 10;
        }
        document.getElementById("goldFighters").innerHTML = "Fighters: " + fightersGold.toLocaleString();
        var totalTotalGold = totalGold + fightersGold;
        document.getElementById("goldTotal").innerHTML = "Total: " + totalTotalGold.toLocaleString();
    }
    function updateGold2() {
        let fightersBought = 0;
        let totalGold = 0;
        for (let index = 1, partialIds = ["Health", "Defense", "Damage", "Crit", "Hit", "Dodge"]; index <= 6; ++index) {
            let gold = 0;
            if (document.getElementById("fighterClass" + index).value != "none") {
                ++fightersBought;
                for (let partial of partialIds) {
                    let level = parseInt(document.getElementById("fighter" + partial + index).value);
                    gold += level * (level + 1) * 5000;
                }
            }
            totalGold += gold;
        }
        let fightersGold = 0;
        for (let cost = 100000; fightersBought > 1; --fightersBought) {
            fightersGold += cost;
            cost *= 10;
        }
        var totalTotalGold = totalGold + fightersGold + parseInt(document.getElementById("simulation2Budget").value);
        return totalTotalGold;
        //return parseInt(document.getElementById("simulation2Budget").value);
    }
    function updateGold3() {
        let fightersBought = 0;
        let totalGold = 0;
        for (let index = 1, partialIds = ["Health", "Defense", "Damage", "Crit", "Hit", "Dodge"]; index <= 6; ++index) {
            let gold = 0;
            if (document.getElementById("fighterClass" + index).value != "none") {
                ++fightersBought;
                for (let partial of partialIds) {
                    let level = parseInt(document.getElementById("fighter" + partial + index).value);
                    gold += level * (level + 1) * 5000;
                }
            }
            totalGold += gold;
        }
        let fightersGold = 0;
        for (let cost = 100000; fightersBought > 1; --fightersBought) {
            fightersGold += cost;
            cost *= 10;
        }
        var totalTotalGold = totalGold + fightersGold;
        return totalTotalGold;
    }

    let simulation = {
        active: false,
        step: 100,
    };
    let simulation2 = {
        active: false,
        step: 100,
    };
    for (let index = 1, partialIds = ["Class", "Health", "Defense", "Damage", "Crit", "Hit", "Dodge"]; index <= 6; ++index) {
        for (let partial of partialIds) {
            document.getElementById("fighter" + partial + index).onchange = updateGold;
        }
    }
    updateGold();    
</script>


</html>